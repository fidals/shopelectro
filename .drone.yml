# @todo #208 Определи оптимальное количество параллельных тестов

pipeline:
  pip-install:
    image: python
    commands:
      - pip install -r requirements.txt
      - rm -rf /usr/app/deps/site-packages
      - mv /usr/local/lib/python3.6/site-packages /usr/app/deps
    volumes:
      - /tmp/cache/drone/shopelectro/site-packages/${DRONE_COMMIT_SHA}:/usr/app/deps

  npm:
    image: node
    environment:
      - DEPS_DIR=/usr/app/deps
    commands:
      - npm install
      - npm install -g gulp-cli
      - gulp build
    volumes:
      - /tmp/cache/drone/shopelectro/node_modules:/drone/src/github.com/fidals/shopelectro/commit/${DRONE_COMMIT_SHA}/node_modules
      - /tmp/cache/drone/shopelectro/site-packages/${DRONE_COMMIT_SHA}/site-packages:/usr/app/deps

  test:
    image: python
    environment:
      - TEST_ENV=true
      - DJANGO_SETTINGS_MODULE=shopelectro.settings.dev
      - DATABASE_URL=postgres://postgres:test@postgres/test
      - BROCKER_URL=amqp://rabbitmq:test@rabbitmq:5672/
      - SELENIUM_URL=http://selenium:4444/wd/hub
      - FTP_IP=${FTP_IP}
      - FTP_USER=${FTP_USER}
      - FTP_PASS=${FTP_PASS}
    commands:
      - python manage.py migrate
      - python manage.py excel
      - python manage.py price
      - python manage.py collectstatic --noinput
      - python manage.py test -v 3 --parallel --liveserver=test:8020-8030
    volumes:
      - /tmp/cache/drone/shopelectro/site-packages/${DRONE_COMMIT_SHA}/site-packages:/usr/local/lib/python3.6/site-packages
    secrets: [ FTP_IP, FTP_USER, FTP_PASS ]

  test-notify:
    image: plugins/slack
    channel: drone
    webhook: ${SLACK_WEBHOOK}
    when:
      status: [ success, failure ]
    secrets: [ SLACK_WEBHOOK ]

  pip-clean:
    image: busybox
    commands:
      - rm -rf /site-packages/${DRONE_COMMIT_SHA}
    volumes:
      - /tmp/cache/drone/shopelectro/site-packages/:/site-packages/
    when:
      status: [ success, failure ]

  docker-build:
    image: docker/compose:1.17.1
    commands:
      - cd docker
      - docker-compose -f docker-compose.yml build --no-cache se-python
      - docker-compose -f docker-compose-production.yml build --no-cache se-source
      - docker-compose -f docker-compose-production.yml build --no-cache se-python
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      # in case if "Push Hooks" is enabled in Drone settings GUI
      - /root/prog/shopelectro/docker/.env:/drone/src/github.com/fidals/shopelectro/commit/${DRONE_COMMIT_SHA}/docker/.env
      # in case if "Pull Request Hooks" is enabled in Drone settings GUI
      - /root/prog/shopelectro/docker/.env:/drone/src/github.com/fidals/shopelectro/pull/${DRONE_PULL_REQUEST}/docker/.env
    when:
      branch: master

  docker-push:
    image: docker:latest
    environment:
      - DOCKER_HUB_LOGIN=${DOCKER_HUB_LOGIN}
      - DOCKER_HUB_PASSWORD=${DOCKER_HUB_PASSWORD}
    commands:
      - docker login -u $DOCKER_HUB_LOGIN -p $DOCKER_HUB_PASSWORD
      - docker push fidals/se-source:prod
      - docker push fidals/se:dev
      - docker push fidals/se:prod
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    when:
      branch: master
    secrets: [ DOCKER_HUB_LOGIN, DOCKER_HUB_PASSWORD ]

  docker-build-notify:
    image: plugins/slack
    channel: drone
    webhook: ${SLACK_WEBHOOK}
    template: >
      *{{build.status}}* docker-compose build & push <{{ build.link }}|{{ repo.owner}}/{{ repo.name }}> ({{ build.branch }}) by {{ build.author }}
    when:
      status: [ success, failure ]
      branch: master
    secrets: [ SLACK_WEBHOOK ]

services:
  postgres:
    image: postgres
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=test
      - POSTGRES_DB=test

  rabbitmq:
    image: rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=rabbitmq
      - RABBITMQ_DEFAULT_PASS=test

  selenium:
    image: selenium/standalone-chrome-debug:3.3.0
    environment: # https://github.com/SeleniumHQ/docker-selenium/issues/392
      - DBUS_SESSION_BUS_ADDRESS=/dev/null
    shm_size: 4G
    volumes: # https://github.com/SeleniumHQ/docker-selenium#running-the-images
      - /dev/shm:/dev/shm
