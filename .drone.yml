branches: master

workspace:
  base: /drone
  path: shopelectro/


pipeline:

  build-nodejs:  # with `npm install` inside
    image: docker/compose:1.22.0
    commands:
      - cd docker/
      - cp drone_env/.env . && cp drone_env/* env_files/
      # nodejs build is not in `docker-build` section,
      # because we have this deps:
      # build nodejs -> gulp build -> build python-prod
      - docker-compose -f docker-compose-build.yml build nodejs
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    when:
      event: [push, pull_request]

  build-static:
    image: fidals/se-nodejs:dev
    environment:
      # deps from nodejs image
      - DEPS_DIR=/usr/app/deps
    commands:
      - cp -r /usr/app/src/node_modules .
      - gulp build
    when:
      event: [push, pull_request]

  build-python:
    image: docker/compose:1.22.0
    commands:
      - cd docker/
      # Build python images with sources and static files
      - docker-compose -f docker-compose-build.yml build python-dev python-prod
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    when:
      event: [push, pull_request]

  fast-test:
    image: fidals/se:dev
    secrets: [ FTP_IP, FTP_USER, FTP_PASS, SELENIUM_WAIT_SECONDS, SELENIUM_TIMEOUT_SECONDS ]
    environment:
      - TEST_ENV=true
      - DJANGO_SETTINGS_MODULE=shopelectro.settings.drone
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=test
      - POSTGRES_URL=postgres
      - POSTGRES_DB=test
      - RABBITMQ_DEFAULT_USER=rabbitmq
      - RABBITMQ_DEFAULT_PASS=test
      - RABBITMQ_URL=rabbitmq
      - RABBITMQ_PORT=5672
      - SELENIUM_URL=http://selenium:4444/wd/hub
      - FTP_IP=${FTP_IP}
      - FTP_USER=${FTP_USER}
      - FTP_PASS=${FTP_PASS}
      - SELENIUM_WAIT_SECONDS=${SELENIUM_WAIT_SECONDS}
      - SELENIUM_TIMEOUT_SECONDS=${SELENIUM_TIMEOUT_SECONDS}
    commands:
      - python manage.py migrate
      - python manage.py excel
      - python manage.py price
      - python manage.py collectstatic --noinput
      - python manage.py test --parallel --tag fast -k -v 3
    when:
      event: [push, pull_request]

  slow-test:
    image: fidals/se:dev
    secrets: [ FTP_IP, FTP_USER, FTP_PASS, SELENIUM_WAIT_SECONDS, SELENIUM_TIMEOUT_SECONDS ]
    environment:
      - TEST_ENV=true
      - DJANGO_SETTINGS_MODULE=shopelectro.settings.drone
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=test
      - POSTGRES_URL=postgres
      - POSTGRES_DB=test
      - RABBITMQ_DEFAULT_USER=rabbitmq
      - RABBITMQ_DEFAULT_PASS=test
      - RABBITMQ_URL=rabbitmq
      - RABBITMQ_PORT=5672
      - SELENIUM_URL=http://selenium:4444/wd/hub
      - FTP_IP=${FTP_IP}
      - FTP_USER=${FTP_USER}
      - FTP_PASS=${FTP_PASS}
      - SELENIUM_WAIT_SECONDS=${SELENIUM_WAIT_SECONDS}
      - SELENIUM_TIMEOUT_SECONDS=${SELENIUM_TIMEOUT_SECONDS}
    commands:
      - python manage.py test --liveserver=slow-test:8021-8029 --parallel --tag slow -k -v 3
    when:
      event: [push, pull_request]

  lint-coala:
    image: fidals/coala-ci
    group: lint
    commands:
      - coala --ci -j 2
    when:
      event: pull_request

  lint-pdd:
    image: fidals/pdd-ci
    group: lint
    commands:
      - pdd --verbose
        --exclude=node_modules/**/*
        --exclude=static/**/*
        --exclude=venv/**/*
        --exclude=media/**/*
        --exclude=.idea/**/*
        --exclude=front_build
        --exclude=front/images
        --exclude=**/*.pyc
        --exclude=**/*.jpg
        -f report.xml
    when:
      event: pull_request

  push-images:
    image: docker:latest
    environment:
      - DOCKER_HUB_LOGIN=${DOCKER_HUB_LOGIN}
      - DOCKER_HUB_PASSWORD=${DOCKER_HUB_PASSWORD}
    commands:
      - docker login -u $DOCKER_HUB_LOGIN -p $DOCKER_HUB_PASSWORD
      - docker push fidals/se-nodejs:dev
      - docker push fidals/se:dev
      - docker push fidals/se:prod
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    when:
      event: push
    secrets: [ DOCKER_HUB_LOGIN, DOCKER_HUB_PASSWORD ]

  copy-drone-env:
    image: debian:latest
    commands:
      - cd docker
      - cp drone_env/* env_files/
      - for x in drone_env/*; do cat $x >> .env; done;
    when:
      status: [ success, failure ]
      event: [push, pull_request]

# @todo #603:60m Resurrect `test-docker-compose` pipe step.
#  See issue details here:
#  https://ci.fidals.com/fidals/shopelectro/1006/13

#  test-docker-compose:
#    image: docker/compose:1.22.0
#    environment:
#      - DJANGO_SETTINGS_MODULE=shopelectro.settings.drone
#      # COMPOSE_INTERACTIVE_NO_CLI in a combination with `docker-compose exec -T`
#      # fixes a syntax error: unterminated quoted string.
#      # Why is it? No one knows.
#      - COMPOSE_INTERACTIVE_NO_CLI=1
#    commands:
#      - cd docker
#      - docker-compose up -d app-drone
#      # wait postgres, apply migrations, create custom pages to reach "/" page
#      - docker-compose exec -T app-drone docker/wait-for.sh postgres:5432
#      - docker-compose exec -T app-drone python manage.py migrate
#      - docker-compose exec -T app-drone python manage.py custom_pages
#      # wait python server and check its health
#      - docker-compose exec -T app-drone docker/wait-for.sh localhost:8000 -- docker/check-health.sh localhost:8000
#    volumes:
#      - /var/run/docker.sock:/var/run/docker.sock
#    when:
#      event: [push, pull_request]

  cleanup:
    image: docker/compose:1.22.0
    commands:
      - cd docker
      - docker-compose logs app-drone
      - docker-compose rm -fs
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    when:
      status: [ success, failure ]
      event: [push, pull_request]

services:
  postgres:
    image: postgres
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=test
      - POSTGRES_DB=test
    when:
      event: [push, pull_request]

  rabbitmq:
    image: rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=rabbitmq
      - RABBITMQ_DEFAULT_PASS=test
    when:
      event: [push, pull_request]

  selenium:
    image: selenium/standalone-chrome-debug:3.10.0
    environment:
      # https://github.com/SeleniumHQ/docker-selenium/issues/392
      - DBUS_SESSION_BUS_ADDRESS=/dev/null
      - SCREEN_WIDTH=1366
      - SCREEN_HEIGHT=768
    shm_size: 4G
    volumes: # https://github.com/SeleniumHQ/docker-selenium#running-the-images
      - /dev/shm:/dev/shm
    when:
      event: [push, pull_request]
